<자바스크립트 이론공부> https://bit.ly/36WlN5a
자바스크립트: 고차원적이며 객체지향적이며 멀티 프로그래밍 언어
높은 수준의 프로토타입 기반, 물체지향적이며 다층적이고 interpreted하거나 compiled한
다이나믹 싱글스레드 garbage-collected 프로그래밍 언어

<용어설명>
트리(Tree) (https://blog.naver.com/vsky712/220558382259 참고)
노드(Node): 트리를 구성하는 기본 원소
Branch/Link/Edge(가지/관계/링크/분기): 노드와 노드 간의 연결선
Degree(각도): 각 노드가 가진 가지의 수
Order(차수): 자식 노드들 중 자식을 최대로 보유한 개수
Root node(루트노드): 최상위에 위치한 노드
Left node(리프노드): Root가 아닌 노드
Terminal node(단말노드): Degree가 0인 노드


interpreter인터프리터(해석): 기계어를 한줄씩 해석하며 실행, ex)파이썬
compiler컴파일(편집): 기계어를 한번에 해석 후 실행 ex) C/C++
Garbage Collection(GC): 이미 할당된 메모리에서 더 이상 사용하지 않는 메모리를 해제하는 행동. ex메모리 청소부. Heap과 MethodArea에서 사용되지 않는 Object를 삭제한다
Heap: 자료를 크기나 순서에 따라 이진트리 형태로 쌓은 것



<How JavaScript works 용어> https://bit.ly/36WlN5a

단일 쓰레드(single-threaded) :OS시스템 함수의 도움으로 하나의 프로세스와 이에 속하는 스레드라는 자원을 할당받게 됨

콜백큐(callbac kqueue):

데드락(Dead lock): 교착 상태’ 불리며 한정된 자원으로 인해 프로세스가 멈추어 버리는 현상
저스트인타임 컴파일(JIT compile)  동적번역이라고도 불리며 프로그램을 실제 실행하는 시점에서 기계어로 번역하는 컴파일 기법
딕셔너리(dictionary): { 사과 : apple , 바나나 : banana } 와 같은 key : value 구조
파라미터(parameter): 인수, 매개 변수
레지스터(register):  CPU 내부에 존재하는 아주 적은 데이터를 잠시 저장할 수 있는 공간이며, 하나의 명령어에서 다른 명령어 또는 운영체계가 제어권을 넘긴 다른 프로그램으로 데이터를 전달하기 위한 장소를 제공. 플립플롭(flip flop)으로 구성



-최적화된 자바스크립트 코드를 작성하는 방법
객체 속성의 순서: 객체 속성을 항상 같은 순서로 초기화해서 히든클래스 및 이후에 생성되는 최적화 코드가 공유될 수 있도록 합니다
동적 속성: 객체 생성 이후에 속성을 추가하는 것은 히든 클래스가 변하도록 강제하고 이전의 히든클래스를 대상으로 최적화되었던 모든 메소드를 느리게 만듭니다. 대신에 모든 객체의 속성을 생성자에서 할당합니다
메소드: 동일한 메소드를 반복적으로 수행하는 코드가 서로 다른 메소드를 한 번씩만 수행하는 코드 보다 더 빠르게 동작합니다(인라인 캐싱 때문)
배열: 값이 띄엄띄엄 있어서 키가 계속해서 증가하는 숫자가 되지 않는 배열은 피하는게 좋습니다. 모든 요소를 가지지는 않는 배열은 해시테이블입니다. 이와 같은 배열의 요소들은 접근하기에 많은 비용이 듭니다. 또한 커다란 배열을 미리 할당하지 않도록 하십시오. 사용하면서 크기가 커지도록 하는 게 낫습니다. 마지막으로 배열의 요소를 삭제하지 마십시오. 그 배열의 키가 띄엄띄엄 배치됩니다.
태깅된 값: V8은 객체와 숫자를 32비트로 표현합니다. 어떤 값이 오브젝트(flag = 1)인지 혹은 정수(flag = 0)인지는 SMI(Small Integer)라는 하나의 비트에 저장하고 이 때문에 31비트가 남습니다. 따라서 어떤 숫자가 31비트 보다 크면 V8은 이 숫자를 분리해서 더블 타입으로 전환한 다음 이 숫자를 넣을 새로운 객체를 생성합니다. 이러한 동작은 비용이 높으므로 가능한한 31비트의 숫자를 사용하도록 하십시오.
세션스택의 우리 개발자들은 고도로 최적화된 자바스크립트 코드를 작성하기 위해 이러한 베스트프랙티스를 따르려고 노력합니다. 왜냐하면 한 번 어떤 프로덕션 웹 앱이 세션스택에 통합화가 이루어지면 모든 것을 녹화하기 때문입니다. 모든 DOM의 변화와 사용자 상호작용, 자바스크립트 예외, 스택 트레이스, 네트워크 요청 실패, 디버깅 메세지 등이 포함됩니다.
세션스택을 이용하면 웹앱의 문제들을 비디오처럼 재생시켜 볼 수 있으며 사용자에게 일어나는 모든 것을 볼 수 있습니다. 그리고 이 모든 것들이 웹앱에는 서능 저하를 일으키지 않고 가능합니다.
무료로 시작할 수 있는 플랜(http://app.sessionstack.com/)도 있습니다.